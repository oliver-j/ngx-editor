{"version":3,"sources":["ng://ngx-editor/app/ngx-editor/common/utils/ngx-editor.utils.ts","ng://ngx-editor/app/ngx-editor/common/services/command-executor.service.ts","ng://ngx-editor/app/ngx-editor/common/services/message.service.ts","ng://ngx-editor/app/ngx-editor/common/ngx-editor.defaults.ts","ng://ngx-editor/app/ngx-editor/ngx-editor.component.ts","ng://ngx-editor/app/ngx-editor/ngx-grippie/ngx-grippie.component.ts","ng://ngx-editor/app/ngx-editor/ngx-editor-message/ngx-editor-message.component.ts","ng://ngx-editor/app/ngx-editor/ngx-editor-toolbar/ngx-editor-toolbar.component.ts","ng://ngx-editor/app/color-picker/color-picker.component.ts","ng://ngx-editor/app/color-picker/color-palette/color-palette.component.ts","ng://ngx-editor/app/color-picker/color-slider/color-slider.component.ts","ng://ngx-editor/app/color-picker/color-picker.module.ts","ng://ngx-editor/app/ngx-editor/ngx-editor.module.ts","ng://ngx-editor/app/ngx-editor/validators/maxlength-validator.ts"],"names":["canEnableToolbarOptions","value","toolbar","filter","array","indexOf","length","saveSelection","window","getSelection","sel","getRangeAt","rangeCount","document","createRange","restoreSelection","range","removeAllRanges","addRange","select","getEditorConfiguration","ngxEditorConfig","input","i","undefined","hasOwnProperty","canResize","resizer","CommandExecutorService","_http","this","prototype","execute","command","savedSelection","Error","execCommand","insertImage","imageURI","Utils.restoreSelection","insertVideo","videParams","isYoutubeLink","videoUrl","youtubeURL","width","height","insertHtml","checkTagSupportInBrowser","isValidURL","videoSrc","url","test","uploadImage","file","endPoint","formData","FormData","append","req","HttpRequest","reportProgress","request","createLink","params","urlNewTab","newUrl","urlLink","urlText","type","insertColor","color","where","checkSelection","setFontSize2","size","setFontSize","fontSize","deletedValue","deleteAndGetElement","isNumeric","fontPx","setFontName","fontName","fontFamily","html","slectedText","toString","deleteContents","tag","createElement","HTMLUnknownElement","Injectable","HttpClient","MessageService","Subject","getMessage","message","asObservable","sendMessage","next","clearMessageIn","milliseconds","setTimeout","_this","editable","spellcheck","minHeight","minWidth","translate","enableToolbar","showToolbar","placeholder","imageEndPoint","NgxEditorComponent","_messageService","_commandExecutor","_renderer","EventEmitter","Utils","onTextAreaFocus","focus","emit","onEditorFocus","textArea","nativeElement","onContentChange","innerHTML","onChange","togglePlaceholder","onTextAreaBlur","Utils.saveSelection","onTouched","blur","resizeTextArea","offsetY","newHeight","parseInt","style","executeCommand","commandName","error","writeValue","refreshView","registerOnChange","fn","registerOnTouched","normalizedValue","setProperty","removeClass","ngxWrapper","addClass","getCollectiveParams","ngOnInit","config","offsetHeight","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","Input","Output","ViewChild","NgxGrippieComponent","_editorComponent","onMouseMove","event","grabber","clientY","oldY","onMouseUp","onResize","preventDefault","HostListener","NgxEditorMessageComponent","subscribe","ngxMessage","clearMessage","NgxEditorToolbarComponent","_popOverConfig","_formBuilder","_commandExecutorService","name","val","fontSizes","outsideClick","placement","container","Utils.canEnableToolbarOptions","triggerCommand","buildUrlForm","urlForm","group","Validators","required","insertLink","urlPopover","hide","buildImageForm","imageForm","imageUrl","buildVideoForm","videoForm","onFileChange","e","uploadComplete","isUploading","target","files","updloadPercentage","Math","round","loaded","total","HttpResponse","body","imagePopover","videoPopover","hex","match","slice","colorPopover","fontSizePopover","PopoverConfig","FormBuilder","ColorPickerComponent","ColorPaletteComponent","ngAfterViewInit","draw","ctx","canvas","getContext","fillStyle","hue","fillRect","whiteGrad","createLinearGradient","addColorStop","blackGrad","selectedPosition","strokeStyle","beginPath","arc","x","y","PI","lineWidth","stroke","ngOnChanges","changes","pos","getColorAtPosition","evt","mousedown","onMouseDown","offsetX","emitColor","rgbaColor","imageData","getImageData","data","ColorSliderComponent","clearRect","gradient","rect","fill","closePath","selectedHeight","ColorPickerModule","NgModule","imports","CommonModule","exports","declarations","NgxEditorModule","FormsModule","ReactiveFormsModule","PopoverModule","forRoot","MaxLengthValidator","maxlength","options","control","innerText","DOMParser","parseFromString","excludeLineBreaks","replace","concatWhiteSpaces","excludeWhiteSpaces","ngxEditor","allowedLength","textLength"],"mappings":"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","sourcesContent":["/**\n * enable or disable toolbar based on configuration\n *\n * @param value toolbar item\n * @param toolbar toolbar configuration object\n */\nexport function canEnableToolbarOptions(value: string, toolbar: any): boolean {\n  if (value) {\n    if (toolbar['length'] === 0) {\n      return true;\n    } else {\n      const found = toolbar.filter(array => {\n        return array.indexOf(value) !== -1;\n      });\n\n      return found.length ? true : false;\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n * set editor configuration\n *\n * @param value configuration via [config] property\n * @param ngxEditorConfig default editor configuration\n * @param input direct configuration inputs via directives\n */\nexport function getEditorConfiguration(value: any, ngxEditorConfig: any, input: any): any {\n  for (const i in ngxEditorConfig) {\n    if (i) {\n      if (input[i] !== undefined) {\n        value[i] = input[i];\n      }\n      if (!value.hasOwnProperty(i)) {\n        value[i] = ngxEditorConfig[i];\n      }\n    }\n  }\n\n  return value;\n}\n\n/**\n * return vertical if the element is the resizer property is set to basic\n *\n * @param resizer type of resizer, either basic or stack\n */\nexport function canResize(resizer: string): any {\n  if (resizer === 'basic') {\n    return 'vertical';\n  }\n  return false;\n}\n\n/**\n * save selection when the editor is focussed out\n */\nexport function saveSelection(): any {\n  if (window.getSelection) {\n    const sel = window.getSelection();\n    if (sel.getRangeAt && sel.rangeCount) {\n      return sel.getRangeAt(0);\n    }\n  } else if (document.getSelection && document.createRange) {\n    return document.createRange();\n  }\n  return null;\n}\n\n/**\n * restore selection when the editor is focussed in\n *\n * @param range saved selection when the editor is focussed out\n */\nexport function restoreSelection(range): boolean {\n  if (range) {\n    if (window.getSelection) {\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n      return true;\n    } else if (document.getSelection && range.select) {\n      range.select();\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpRequest } from '@angular/common/http';\nimport * as Utils from '../utils/ngx-editor.utils';\n\n@Injectable()\nexport class CommandExecutorService {\n  /** saves the selection from the editor when focussed out */\n  savedSelection: any = undefined;\n\n  /**\n   *\n   * @param _http HTTP Client for making http requests\n   */\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * executes command from the toolbar\n   *\n   * @param command command to be executed\n   */\n  execute(command: string): void {\n    if (!this.savedSelection && command !== 'enableObjectResizing') {\n      throw new Error('Range out of Editor');\n    }\n\n    if (command === 'enableObjectResizing') {\n      document.execCommand('enableObjectResizing', true);\n    }\n\n    if (command === 'blockquote') {\n      document.execCommand('formatBlock', false, 'blockquote');\n    }\n\n    if (command === 'removeBlockquote') {\n      document.execCommand('formatBlock', false, 'div');\n    }\n\n    document.execCommand(command, false, null);\n  }\n\n  /**\n   * inserts image in the editor\n   *\n   * @param imageURI url of the image to be inserted\n   */\n  insertImage(imageURI: string): void {\n    if (this.savedSelection) {\n      if (imageURI) {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          const inserted = document.execCommand('insertImage', false, imageURI);\n          if (!inserted) {\n            throw new Error('Invalid URL');\n          }\n        }\n      }\n    } else {\n      throw new Error('Keine Textstelle ausgewÃ¤hlt');\n    }\n  }\n\n  /**\n * inserts image in the editor\n *\n * @param videParams url of the image to be inserted\n */\n  insertVideo(videParams: any): void {\n    if (this.savedSelection) {\n      if (videParams) {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          if (this.isYoutubeLink(videParams.videoUrl)) {\n            const youtubeURL = '<iframe width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n              + 'src=\"' + videParams.videoUrl + '\"></iframe>';\n            this.insertHtml(youtubeURL);\n          } else if (this.checkTagSupportInBrowser('video')) {\n\n            if (this.isValidURL(videParams.videoUrl)) {\n              const videoSrc = '<video width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n                + ' controls=\"true\"><source src=\"' + videParams.videoUrl + '\"></video>';\n              this.insertHtml(videoSrc);\n            } else {\n              throw new Error('Invalid video URL');\n            }\n\n          } else {\n            throw new Error('Unable to insert video');\n          }\n        }\n      }\n    } else {\n      throw new Error('Keine Textstelle ausgewÃ¤hlt');\n    }\n  }\n\n  /**\n   * checks the input url is a valid youtube URL or not\n   *\n   * @param url Youtue URL\n   */\n  private isYoutubeLink(url: string): boolean {\n    const ytRegExp = /^(http(s)?:\\/\\/)?((w){3}.)?youtu(be|.be)?(\\.com)?\\/.+/;\n    return ytRegExp.test(url);\n  }\n\n  /**\n   * check whether the string is a valid url or not\n   * @param url url\n   */\n  private isValidURL(url: string) {\n    const urlRegExp = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n    return urlRegExp.test(url);\n  }\n\n  /**\n   * uploads image to the server\n   *\n   * @param file file that has to be uploaded\n   * @param endPoint enpoint to which the image has to be uploaded\n   */\n  uploadImage(file: File, endPoint: string): any {\n    if (!endPoint) {\n      throw new Error('Image Endpoint isn`t provided or invalid');\n    }\n\n    const formData: FormData = new FormData();\n\n    if (file) {\n\n      formData.append('file', file);\n\n      const req = new HttpRequest('POST', endPoint, formData, {\n        reportProgress: true\n      });\n\n      return this._http.request(req);\n\n    } else {\n      throw new Error('Invalid Image');\n    }\n  }\n\n  /**\n   * inserts link in the editor\n   *\n   * @param params parameters that holds the information for the link\n   */\n  createLink(params: any): void {\n    if (this.savedSelection) {\n      /**\n       * check whether the saved selection contains a range or plain selection\n       */\n      if (params.urlNewTab) {\n        const newUrl = '<a href=\"' + params.urlLink + '\" target=\"_blank\">' + params.urlText + '</a>';\n\n        if (document.getSelection().type !== 'Range') {\n          const restored = Utils.restoreSelection(this.savedSelection);\n          if (restored) {\n            this.insertHtml(newUrl);\n          }\n        } else {\n          throw new Error('Only new links can be inserted. You cannot edit URL`s');\n        }\n      } else {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          document.execCommand('createLink', false, params.urlLink);\n        }\n      }\n    } else {\n      throw new Error('Keine Textstelle ausgewÃ¤hlt');\n    }\n  }\n\n  /**\n   * insert color either font or background\n   *\n   * @param color color to be inserted\n   * @param where where the color has to be inserted either text/background\n   */\n  insertColor(color: string, where: string): void {\n    if (this.savedSelection) {\n      const restored = Utils.restoreSelection(this.savedSelection);\n      if (restored && this.checkSelection()) {\n        if (where === 'textColor') {\n          document.execCommand('foreColor', false, color);\n        } else {\n          document.execCommand('hiliteColor', false, color);\n        }\n      }\n    } else {\n      throw new Error('Keine Textstelle ausgewÃ¤hlt');\n    }\n  }\n\n\n  setFontSize2(size: string) {\n    if (this.savedSelection) {\n      const restored = Utils.restoreSelection(this.savedSelection);\n      if (restored && this.checkSelection()) {\n        document.execCommand('fontSize', false, size);\n      }\n    }\n  }\n\n  /**\n   * set font size for text\n   *\n   * @param fontSize font-size to be set\n   */\n  setFontSize(fontSize: string): void {\n    if (this.savedSelection && this.checkSelection()) {\n      const deletedValue = this.deleteAndGetElement();\n\n      if (deletedValue) {\n        const restored = Utils.restoreSelection(this.savedSelection);\n\n        if (restored) {\n          if (this.isNumeric(fontSize)) {\n            const fontPx = '<span style=\"font-size: ' + fontSize + 'px;\">' + deletedValue + '</span>';\n            this.insertHtml(fontPx);\n          } else {\n            // const fontPx = '<span style=\"font-size: ' + fontSize + ';\">' + deletedValue + '</span>';\n            const fontPx = `<span class=font-${fontSize}> ${deletedValue} </span>`;\n            this.insertHtml(fontPx);\n          }\n        }\n      }\n    } else {\n      throw new Error('Keine Textstelle ausgewÃ¤hlt');\n    }\n  }\n\n  /**\n   * set font name/family for text\n   *\n   * @param fontName font-family to be set\n   */\n  setFontName(fontName: string): void {\n    if (this.savedSelection && this.checkSelection()) {\n      const deletedValue = this.deleteAndGetElement();\n\n      if (deletedValue) {\n        const restored = Utils.restoreSelection(this.savedSelection);\n\n        if (restored) {\n          if (this.isNumeric(fontName)) {\n            const fontFamily = '<span style=\"font-family: ' + fontName + 'px;\">' + deletedValue + '</span>';\n            this.insertHtml(fontFamily);\n          } else {\n            const fontFamily = '<span style=\"font-family: ' + fontName + ';\">' + deletedValue + '</span>';\n            this.insertHtml(fontFamily);\n          }\n        }\n      }\n    } else {\n      throw new Error('Keine Textstelle ausgewÃ¤hlt');\n    }\n  }\n\n  /** insert HTML */\n  private insertHtml(html: string): void {\n    const isHTMLInserted = document.execCommand('insertHTML', false, html);\n\n    if (!isHTMLInserted) {\n      throw new Error('Unable to perform the operation');\n    }\n  }\n\n  /**\n   * check whether the value is a number or string\n   * if number return true\n   * else return false\n   */\n  private isNumeric(value: any): boolean {\n    return /^-{0,1}\\d+$/.test(value);\n  }\n\n  /** delete the text at selected range and return the value */\n  private deleteAndGetElement(): any {\n    let slectedText;\n\n    if (this.savedSelection) {\n      slectedText = this.savedSelection.toString();\n      this.savedSelection.deleteContents();\n      return slectedText;\n    }\n\n    return false;\n  }\n\n  /** check any slection is made or not */\n  private checkSelection(): any {\n    const slectedText = this.savedSelection.toString();\n\n    if (slectedText.length === 0) {\n      throw new Error('Keine Textstelle ausgewÃ¤hlt');\n    }\n\n    return true;\n  }\n\n  /**\n   * check tag is supported by browser or not\n   *\n   * @param tag HTML tag\n   */\n  private checkTagSupportInBrowser(tag: string): boolean {\n    return !(document.createElement(tag) instanceof HTMLUnknownElement);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\n\n/** time in which the message has to be cleared */\nconst DURATION = 7000;\n\n@Injectable()\nexport class MessageService {\n  /** variable to hold the user message */\n  private message: Subject<string> = new Subject();\n\n  constructor() { }\n\n  /** returns the message sent by the editor */\n  getMessage(): Observable<string> {\n    return this.message.asObservable();\n  }\n\n  /**\n   * sends message to the editor\n   *\n   * @param message message to be sent\n   */\n  sendMessage(message: string): void {\n    this.message.next(message);\n    this.clearMessageIn(DURATION);\n  }\n\n  /**\n   * a short interval to clear message\n   *\n   * @param milliseconds time in seconds in which the message has to be cleared\n   */\n  private clearMessageIn(milliseconds: number): void {\n    setTimeout(() => {\n      this.message.next(undefined);\n    }, milliseconds);\n  }\n}\n","/**\n * toolbar default configuration\n */\nexport const ngxEditorConfig = {\n  editable: true,\n  spellcheck: true,\n  height: 'auto',\n  minHeight: '0',\n  width: 'auto',\n  minWidth: '0',\n  translate: 'yes',\n  enableToolbar: true,\n  showToolbar: true,\n  placeholder: 'Text hier einfÃ¼gen...',\n  imageEndPoint: '',\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strikeThrough', 'superscript', 'subscript'],\n    ['fontName', 'fontSize', 'color'],\n    ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent'],\n    ['cut', 'copy', 'delete', 'removeFormat', 'undo', 'redo'],\n    ['paragraph', 'blockquote', 'removeBlockquote', 'horizontalLine', 'orderedList', 'unorderedList'],\n    ['link', 'unlink', 'image', 'video']\n  ]\n};\n","import {\n  Component, OnInit, Input, Output, ViewChild,\n  EventEmitter, Renderer2, forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { CommandExecutorService } from './common/services/command-executor.service';\nimport { MessageService } from './common/services/message.service';\n\nimport { ngxEditorConfig } from './common/ngx-editor.defaults';\nimport * as Utils from './common/utils/ngx-editor.utils';\n\n\n@Component({\n  selector: 'app-ngx-editor',\n  templateUrl: './ngx-editor.component.html',\n  styleUrls: ['./ngx-editor.component.scss'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgxEditorComponent),\n    multi: true\n  }]\n})\n\nexport class NgxEditorComponent implements OnInit, ControlValueAccessor {\n  /** Specifies weather the textarea to be editable or not */\n  @Input() editable: boolean;\n  /** The spellcheck property specifies whether the element is to have its spelling and grammar checked or not. */\n  @Input() spellcheck: boolean;\n  /** Placeholder for the textArea */\n  @Input() placeholder: string;\n  /**\n   * The translate property specifies whether the content of an element should be translated or not.\n   *\n   * Check https://www.w3schools.com/tags/att_global_translate.asp for more information and browser support\n   */\n  @Input() translate: string;\n  /** Sets height of the editor */\n  @Input() height: string;\n  /** Sets minimum height for the editor */\n  @Input() minHeight: string;\n  /** Sets Width of the editor */\n  @Input() width: string;\n  /** Sets minimum width of the editor */\n  @Input() minWidth: string;\n  /**\n   * Toolbar accepts an array which specifies the options to be enabled for the toolbar\n   *\n   * Check ngxEditorConfig for toolbar configuration\n   *\n   * Passing an empty array will enable all toolbar\n   */\n  @Input() toolbar: Object;\n  /**\n   * The editor can be resized vertically.\n   *\n   * `basic` resizer enables the html5 reszier. Check here https://www.w3schools.com/cssref/css3_pr_resize.asp\n   *\n   * `stack` resizer enable a resizer that looks like as if in https://stackoverflow.com\n   */\n  @Input() resizer = 'stack';\n  /**\n   * The config property is a JSON object\n   *\n   * All avaibale inputs inputs can be provided in the configuration as JSON\n   * inputs provided directly are considered as top priority\n   */\n  @Input() config = ngxEditorConfig;\n  /** Weather to show or hide toolbar */\n  @Input() showToolbar: boolean;\n  /** Weather to enable or disable the toolbar */\n  @Input() enableToolbar: boolean;\n  /** Endpoint for which the image to be uploaded */\n  @Input() imageEndPoint: string;\n\n  /** emits `blur` event when focused out from the textarea */\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\n  /** emits `focus` event when focused in to the textarea */\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChild('ngxTextArea') textArea: any;\n  @ViewChild('ngxWrapper') ngxWrapper: any;\n\n  Utils: any = Utils;\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n\n  /**\n   * @param _messageService service to send message to the editor message component\n   * @param _commandExecutor executes command from the toolbar\n   * @param _renderer access and manipulate the dom element\n   */\n  constructor(\n    private _messageService: MessageService,\n    private _commandExecutor: CommandExecutorService,\n    private _renderer: Renderer2) { }\n\n  /**\n   * events\n   */\n  onTextAreaFocus(): void {\n    this.focus.emit('focus');\n  }\n\n  /** focus the text area when the editor is focussed */\n  onEditorFocus() {\n    this.textArea.nativeElement.focus();\n  }\n\n  /**\n   * Executed from the contenteditable section while the input property changes\n   * @param html html string from contenteditable\n   */\n  onContentChange(innerHTML: string): void {\n    if (typeof this.onChange === 'function') {\n      this.onChange(innerHTML);\n      this.togglePlaceholder(innerHTML);\n    }\n  }\n\n  onTextAreaBlur(): void {\n    /** save selection if focussed out */\n    this._commandExecutor.savedSelection = Utils.saveSelection();\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n    this.blur.emit('blur');\n  }\n\n  /**\n   * resizing text area\n   *\n   * @param offsetY vertical height of the eidtable portion of the editor\n   */\n  resizeTextArea(offsetY: number): void {\n    let newHeight = parseInt(this.height, 10);\n    newHeight += offsetY;\n    this.height = newHeight + 'px';\n    this.textArea.nativeElement.style.height = this.height;\n  }\n\n  /**\n   * editor actions, i.e., executes command from toolbar\n   *\n   * @param commandName name of the command to be executed\n   */\n  executeCommand(commandName: string): void {\n    try {\n      this._commandExecutor.execute(commandName);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n  }\n\n  /**\n   * Write a new value to the element.\n   *\n   * @param value value to be executed when there is a change in contenteditable\n   */\n  writeValue(value: any): void {\n    this.togglePlaceholder(value);\n\n    if (value === null || value === undefined || value === '' || value === '<br>') {\n      value = null;\n    }\n\n    this.refreshView(value);\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a change event.\n   *\n   * @param fn a function\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a touch event.\n   *\n   * @param fn a function\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * refresh view/HTML of the editor\n   *\n   * @param value html string from the editor\n   */\n  refreshView(value: string): void {\n    const normalizedValue = value === null ? '' : value;\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n  }\n\n  /**\n   * toggles placeholder based on input string\n   *\n   * @param value A HTML string from the editor\n   */\n  togglePlaceholder(value: any): void {\n    if (!value || value === '<br>' || value === '') {\n      this._renderer.addClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n    } else {\n      this._renderer.removeClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n    }\n  }\n\n  /**\n   * returns a json containing input params\n   */\n  getCollectiveParams(): any {\n    return {\n      editable: this.editable,\n      spellcheck: this.spellcheck,\n      placeholder: this.placeholder,\n      translate: this.translate,\n      height: this.height,\n      minHeight: this.minHeight,\n      width: this.width,\n      minWidth: this.minWidth,\n      enableToolbar: this.enableToolbar,\n      showToolbar: this.showToolbar,\n      imageEndPoint: this.imageEndPoint,\n      toolbar: this.toolbar\n    };\n  }\n\n  ngOnInit() {\n    /**\n     * set configuartion\n     */\n    this.config = this.Utils.getEditorConfiguration(this.config, ngxEditorConfig, this.getCollectiveParams());\n\n    this.height = this.height || this.textArea.nativeElement.offsetHeight;\n\n    this.executeCommand('enableObjectResizing');\n  }\n}\n","import { Component, HostListener } from '@angular/core';\nimport { NgxEditorComponent } from '../ngx-editor.component';\n\n@Component({\n  selector: 'app-ngx-grippie',\n  templateUrl: './ngx-grippie.component.html',\n  styleUrls: ['./ngx-grippie.component.scss']\n})\n\nexport class NgxGrippieComponent {\n  /** height of the editor */\n  height: number;\n  /** previous value befor resizing the editor */\n  oldY = 0;\n  /** set to true on mousedown event */\n  grabber = false;\n\n  /**\n   * Constructor\n   *\n   * @param _editorComponent Editor component\n   */\n  constructor(private _editorComponent: NgxEditorComponent) { }\n\n  /**\n   *\n   * @param event Mouseevent\n   *\n   * Update the height of the editor when the grabber is dragged\n   */\n  @HostListener('document:mousemove', ['$event']) onMouseMove(event: MouseEvent) {\n    if (!this.grabber) {\n      return;\n    }\n\n    this._editorComponent.resizeTextArea(event.clientY - this.oldY);\n    this.oldY = event.clientY;\n  }\n\n  /**\n   *\n   * @param event Mouseevent\n   *\n   * set the grabber to false on mouse up action\n   */\n  @HostListener('document:mouseup', ['$event']) onMouseUp(event: MouseEvent) {\n    this.grabber = false;\n  }\n\n  @HostListener('mousedown', ['$event']) onResize(event: MouseEvent, resizer?: Function) {\n    this.grabber = true;\n    this.oldY = event.clientY;\n    event.preventDefault();\n  }\n\n}\n","import { Component } from '@angular/core';\n\nimport { MessageService } from '../common/services/message.service';\n\n@Component({\n  selector: 'app-ngx-editor-message',\n  templateUrl: './ngx-editor-message.component.html',\n  styleUrls: ['./ngx-editor-message.component.scss']\n})\n\nexport class NgxEditorMessageComponent {\n  /** property that holds the message to be displayed on the editor */\n  ngxMessage = undefined;\n\n  /**\n   * @param _messageService service to send message to the editor\n   */\n  constructor(private _messageService: MessageService) {\n    this._messageService.getMessage().subscribe((message: string) => this.ngxMessage = message);\n  }\n\n  /**\n   * clears editor message\n   */\n  clearMessage(): void {\n    this.ngxMessage = undefined;\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpResponse } from '@angular/common/http';\nimport { PopoverConfig } from 'ngx-bootstrap';\nimport { CommandExecutorService } from '../common/services/command-executor.service';\nimport { MessageService } from '../common/services/message.service';\nimport * as Utils from '../common/utils/ngx-editor.utils';\nimport {ColorPickerComponent} from '../../color-picker/color-picker.component';\n\n@Component({\n  selector: 'app-ngx-editor-toolbar',\n  templateUrl: './ngx-editor-toolbar.component.html',\n  styleUrls: ['./ngx-editor-toolbar.component.scss'],\n  providers: [PopoverConfig]\n})\n\nexport class NgxEditorToolbarComponent implements OnInit {\n\n  public fontSizes = [\n    {name: \"Normal\", val: \"normal\"},\n    {name: \"Klein\", val: \"small\"},\n    {name: \"GroÃ\", val: \"big\"}\n  ];\n\n  /** holds values of the insert link form */\n  urlForm: FormGroup;\n  /** holds values of the insert image form */\n  imageForm: FormGroup;\n  /** holds values of the insert video form */\n  videoForm: FormGroup;\n  /** set to false when image is being uploaded */\n  uploadComplete = true;\n  /** upload percentage */\n  updloadPercentage = 0;\n  /** set to true when the image is being uploaded */\n  isUploading = false;\n  /** which tab to active for color insetion */\n  selectedColorTab = 'textColor';\n  /** font family name */\n  fontName = '';\n  /** font size */\n  fontSize = this.fontSizes[0].val;\n  /** hex color code */\n  hexColor = '';\n  /** show/hide image uploader */\n  isImageUploader = false;\n\n  /**\n   * Editor configuration\n   */\n  @Input() config: any;\n  @ViewChild('urlPopover') urlPopover;\n  @ViewChild('imagePopover') imagePopover;\n  @ViewChild('videoPopover') videoPopover;\n  @ViewChild('fontSizePopover') fontSizePopover;\n  @ViewChild('colorPopover') colorPopover;\n  /**\n   * Emits an event when a toolbar button is clicked\n   */\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\n\n\n  constructor(private _popOverConfig: PopoverConfig,\n    private _formBuilder: FormBuilder,\n    private _messageService: MessageService,\n    private _commandExecutorService: CommandExecutorService) {\n    this._popOverConfig.outsideClick = true;\n    this._popOverConfig.placement = 'bottom';\n    this._popOverConfig.container = 'body';\n    this.fontSize = this.fontSizes[0].val;\n  }\n\n  /**\n   * enable or diable toolbar based on configuration\n   *\n   * @param value name of the toolbar buttons\n   */\n  canEnableToolbarOptions(value): boolean {\n    return Utils.canEnableToolbarOptions(value, this.config['toolbar']);\n  }\n\n  /**\n   * triggers command from the toolbar to be executed and emits an event\n   *\n   * @param command name of the command to be executed\n   */\n  triggerCommand(command: string): void {\n    this.execute.emit(command);\n  }\n\n  /**\n   * create URL insert form\n   */\n  buildUrlForm(): void {\n    this.urlForm = this._formBuilder.group({\n      urlLink: ['', [Validators.required]],\n      urlText: ['', [Validators.required]],\n      urlNewTab: [true]\n    });\n  }\n\n  /**\n   * inserts link in the editor\n   */\n  insertLink(): void {\n    try {\n      this._commandExecutorService.createLink(this.urlForm.value);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildUrlForm();\n    /** close inset URL pop up */\n    this.urlPopover.hide();\n  }\n\n  /**\n   * create insert image form\n   */\n  buildImageForm(): void {\n    this.imageForm = this._formBuilder.group({\n      imageUrl: ['', [Validators.required]]\n    });\n  }\n\n  /**\n   * create insert image form\n   */\n  buildVideoForm(): void {\n    this.videoForm = this._formBuilder.group({\n      videoUrl: ['', [Validators.required]],\n      height: [''],\n      width: ['']\n    });\n  }\n\n  /**\n   * Executed when file is selected\n   *\n   * @param e onChange event\n   */\n  onFileChange(e): void {\n    this.uploadComplete = false;\n    this.isUploading = true;\n\n    if (e.target.files.length > 0) {\n      const file = e.target.files[0];\n\n      try {\n        this._commandExecutorService.uploadImage(file, this.config.imageEndPoint).subscribe(event => {\n\n          if (event.type) {\n            this.updloadPercentage = Math.round(100 * event.loaded / event.total);\n          }\n\n          if (event instanceof HttpResponse) {\n            try {\n              this._commandExecutorService.insertImage(event.body.url);\n            } catch (error) {\n              this._messageService.sendMessage(error.message);\n            }\n            this.uploadComplete = true;\n            this.isUploading = false;\n          }\n        });\n      } catch (error) {\n        this._messageService.sendMessage(error.message);\n        this.uploadComplete = true;\n        this.isUploading = false;\n      }\n    }\n  }\n\n  /** insert image in the editor */\n  insertImage(): void {\n    try {\n      this._commandExecutorService.insertImage(this.imageForm.value.imageUrl);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildImageForm();\n    /** close inset URL pop up */\n    this.imagePopover.hide();\n  }\n\n  /** insert image in the editor */\n  insertVideo(): void {\n    try {\n      this._commandExecutorService.insertVideo(this.videoForm.value);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildVideoForm();\n    /** close inset URL pop up */\n    this.videoPopover.hide();\n  }\n\n  /** inser text/background color */\n  insertColor(color: string, where: string): void {\n    try {\n      let hex: any = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n      hex =  \"#\" +\n        (\"0\" + parseInt(hex[1],10).toString(16)).slice(-2) +\n        (\"0\" + parseInt(hex[2],10).toString(16)).slice(-2) +\n        (\"0\" + parseInt(hex[3],10).toString(16)).slice(-2);\n      this._commandExecutorService.insertColor(hex, where);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.colorPopover.hide();\n  }\n\n  /** set font size */\n  setFontSize(fontSize: string): void {\n    try {\n      this._commandExecutorService.setFontSize(fontSize);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.fontSizePopover.hide();\n  }\n\n  /** set font Name/family */\n  setFontName(fontName: string): void {\n    try {\n      this._commandExecutorService.setFontName(fontName);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.fontSizePopover.hide();\n  }\n\n  ngOnInit() {\n    this.buildUrlForm();\n    this.buildImageForm();\n    this.buildVideoForm();\n    this.fontSize = this.fontSizes[0].val;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-color-picker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.css']\n})\nexport class ColorPickerComponent {\n  public hue: string;\n  public color: string;\n}\n","import { Component, ViewChild, ElementRef, AfterViewInit, Input, Output, SimpleChanges, OnChanges, EventEmitter, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'app-color-palette',\n  templateUrl: './color-palette.component.html',\n  styleUrls: ['./color-palette.component.css']\n})\nexport class ColorPaletteComponent implements AfterViewInit, OnChanges {\n  @Input()\n  hue: string;\n\n  @Output()\n  color: EventEmitter<string> = new EventEmitter(true);\n\n  @ViewChild('canvas')\n  canvas: ElementRef<HTMLCanvasElement>;\n\n  private ctx: CanvasRenderingContext2D;\n\n  private mousedown: boolean = false;\n\n  public selectedPosition: { x: number; y: number };\n\n  ngAfterViewInit() {\n    this.draw();\n  }\n\n  draw() {\n    if (!this.ctx) {\n      this.ctx = this.canvas.nativeElement.getContext('2d');\n    }\n    const width = this.canvas.nativeElement.width;\n    const height = this.canvas.nativeElement.height;\n\n    this.ctx.fillStyle = this.hue || 'rgba(255,255,255,1)';\n    this.ctx.fillRect(0, 0, width, height);\n\n    const whiteGrad = this.ctx.createLinearGradient(0, 0, width, 0);\n    whiteGrad.addColorStop(0, 'rgba(255,255,255,1)');\n    whiteGrad.addColorStop(1, 'rgba(255,255,255,0)');\n\n    this.ctx.fillStyle = whiteGrad;\n    this.ctx.fillRect(0, 0, width, height);\n\n    const blackGrad = this.ctx.createLinearGradient(0, 0, 0, height);\n    blackGrad.addColorStop(0, 'rgba(0,0,0,0)');\n    blackGrad.addColorStop(1, 'rgba(0,0,0,1)');\n\n    this.ctx.fillStyle = blackGrad;\n    this.ctx.fillRect(0, 0, width, height);\n\n    if (this.selectedPosition) {\n      this.ctx.strokeStyle = 'white';\n      this.ctx.fillStyle = 'white';\n      this.ctx.beginPath();\n      this.ctx.arc(this.selectedPosition.x, this.selectedPosition.y, 10, 0, 2 * Math.PI);\n      this.ctx.lineWidth = 5;\n      this.ctx.stroke();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['hue']) {\n      this.draw();\n      const pos = this.selectedPosition;\n      if (pos) {\n        this.color.emit(this.getColorAtPosition(pos.x, pos.y));\n      }\n    }\n  }\n\n  @HostListener('window:mouseup', ['$event'])\n  onMouseUp(evt: MouseEvent) {\n    this.mousedown = false;\n  }\n\n  onMouseDown(evt: MouseEvent) {\n    this.mousedown = true;\n    this.selectedPosition = { x: evt.offsetX, y: evt.offsetY };\n    this.draw();\n    this.color.emit(this.getColorAtPosition(evt.offsetX, evt.offsetY));\n  }\n\n  onMouseMove(evt: MouseEvent) {\n    if (this.mousedown) {\n      this.selectedPosition = { x: evt.offsetX, y: evt.offsetY };\n      this.draw();\n      this.emitColor(evt.offsetX, evt.offsetY);\n    }\n  }\n\n  emitColor(x: number, y: number) {\n    const rgbaColor = this.getColorAtPosition(x, y);\n    this.color.emit(rgbaColor);\n  }\n\n  getColorAtPosition(x: number, y: number) {\n    const imageData = this.ctx.getImageData(x, y, 1, 1).data;\n    return 'rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)';\n  }\n}\n","import { Component, ViewChild, ElementRef, AfterViewInit, Output, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-color-slider',\n  templateUrl: './color-slider.component.html',\n  styleUrls: ['./color-slider.component.css']\n})\nexport class ColorSliderComponent implements AfterViewInit {\n  @ViewChild('canvas')\n  canvas: ElementRef<HTMLCanvasElement>;\n\n  @Output()\n  color: EventEmitter<string> = new EventEmitter();\n\n  private ctx: CanvasRenderingContext2D;\n  private mousedown: boolean = false;\n  private selectedHeight: number;\n\n  ngAfterViewInit() {\n    this.draw();\n  }\n\n  draw() {\n    if (!this.ctx) {\n      this.ctx = this.canvas.nativeElement.getContext('2d');\n    }\n    const width = this.canvas.nativeElement.width;\n    const height = this.canvas.nativeElement.height;\n\n    this.ctx.clearRect(0, 0, width, height);\n\n    const gradient = this.ctx.createLinearGradient(0, 0, 0, height);\n    gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');\n    gradient.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\n    gradient.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\n    gradient.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\n    gradient.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\n    gradient.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\n    gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');\n\n    this.ctx.beginPath();\n    this.ctx.rect(0, 0, width, height);\n\n    this.ctx.fillStyle = gradient;\n    this.ctx.fill();\n    this.ctx.closePath();\n\n    if (this.selectedHeight) {\n      this.ctx.beginPath();\n      this.ctx.strokeStyle = 'white';\n      this.ctx.lineWidth = 5;\n      this.ctx.rect(0, this.selectedHeight - 5, width, 10);\n      this.ctx.stroke();\n      this.ctx.closePath();\n    }\n  }\n\n  @HostListener('window:mouseup', ['$event'])\n  onMouseUp(evt: MouseEvent) {\n    this.mousedown = false;\n  }\n\n  onMouseDown(evt: MouseEvent) {\n    this.mousedown = true;\n    this.selectedHeight = evt.offsetY;\n    this.draw();\n    this.emitColor(evt.offsetX, evt.offsetY);\n  }\n\n  onMouseMove(evt: MouseEvent) {\n    if (this.mousedown) {\n      this.selectedHeight = evt.offsetY;\n      this.draw();\n      this.emitColor(evt.offsetX, evt.offsetY);\n    }\n  }\n\n  emitColor(x: number, y: number) {\n    const rgbaColor = this.getColorAtPosition(x, y);\n    this.color.emit(rgbaColor);\n  }\n\n  getColorAtPosition(x: number, y: number) {\n    const imageData = this.ctx.getImageData(x, y, 1, 1).data;\n    return 'rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColorPickerComponent } from './color-picker.component';\nimport { ColorPaletteComponent } from './color-palette/color-palette.component';\nimport { ColorSliderComponent } from './color-slider/color-slider.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [ColorPickerComponent ],\n  declarations: [ColorPickerComponent, ColorPaletteComponent, ColorSliderComponent]\n})\nexport class ColorPickerModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { PopoverModule } from 'ngx-bootstrap';\nimport { NgxEditorComponent } from './ngx-editor.component';\nimport { NgxGrippieComponent } from './ngx-grippie/ngx-grippie.component';\nimport { NgxEditorMessageComponent } from './ngx-editor-message/ngx-editor-message.component';\nimport { NgxEditorToolbarComponent } from './ngx-editor-toolbar/ngx-editor-toolbar.component';\nimport { MessageService } from './common/services/message.service';\nimport { CommandExecutorService } from './common/services/command-executor.service';\nimport {ColorPickerModule} from '../color-picker/color-picker.module';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, PopoverModule.forRoot(), ColorPickerModule],\n  declarations: [NgxEditorComponent, NgxGrippieComponent, NgxEditorMessageComponent, NgxEditorToolbarComponent],\n  exports: [NgxEditorComponent],\n  providers: [CommandExecutorService, MessageService]\n})\n\nexport class NgxEditorModule { }\n","import { AbstractControl } from '@angular/forms';\n\ninterface IMaxLengthValidatorOptions {\n  excludeLineBreaks?: boolean;\n  concatWhiteSpaces?: boolean;\n  excludeWhiteSpaces?: boolean;\n}\n\nexport function MaxLengthValidator(maxlength: number, options?: IMaxLengthValidatorOptions) {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const parsedDocument = new DOMParser().parseFromString(control.value, 'text/html');\n    let innerText = parsedDocument.body.innerText || '';\n\n    // replace all linebreaks\n    if (options.excludeLineBreaks) {\n      innerText = innerText.replace(/(\\r\\n\\t|\\n|\\r\\t)/gm, '');\n    }\n\n    // concat multiple whitespaces into a single whitespace\n    if (options.concatWhiteSpaces) {\n      innerText = innerText.replace(/(\\s\\s+)/gm, ' ');\n    }\n\n    // remove all whitespaces\n    if (options.excludeWhiteSpaces) {\n      innerText = innerText.replace(/(\\s)/gm, '');\n    }\n\n    if (innerText.length > maxlength) {\n      return {\n        ngxEditor: {\n          allowedLength: maxlength,\n          textLength: innerText.length\n        }\n      };\n    }\n    return null;\n  };\n}\n"]}